name: Build Kernel with Prebuilt Clang

on:
  workflow_dispatch:

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout kernel source
        uses: actions/checkout@v4

      - name: Install dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y \
            bc bison flex libssl-dev libncurses-dev \
            build-essential wget git python3 \
            libelf-dev zip curl ccache \
            gcc-aarch64-linux-gnu g++-aarch64-linux-gnu \
            gcc-arm-linux-gnueabi
            
      - name: Clone prebuilt Clang
        run: |
          git clone --depth=1 https://github.com/ekqiplur/clangapan.git clang-prebuilt
        # git clone --depth=1 https://github.com/ekqiplur/calang-clang.git clang

      - name: Set Toolchain PATH and Create Symlinks for LLVM Tools
        run: |
          CLONED_REPO_DIR="$(pwd)/clang-prebuilt" 
          TOOLCHAIN_ROOT_DIR="${CLONED_REPO_DIR}"
          TOOLCHAIN_BIN_DIR="${TOOLCHAIN_ROOT_DIR}/bin"

          echo "DEBUG: Listing contents of the cloned toolchain repository:"
          ls -R "${CLONED_REPO_DIR}" || true
          echo "---"

          echo "DEBUG: Listing contents of the detected toolchain root directory:"
          ls -R "${TOOLCHAIN_ROOT_DIR}" || true
          echo "---"

          # Export PATH agar langsung berlaku di step ini DAN step berikutnya
          export PATH="${TOOLCHAIN_BIN_DIR}:$PATH"
          echo "PATH=${TOOLCHAIN_BIN_DIR}:$PATH" >> $GITHUB_ENV

          echo "DEBUG: Current PATH after modification in this step:"
          echo $PATH
          echo "---"

          # Cari lld atau ld.lld dan gunakan yang ditemukan
          LLD_BINARY=""
          if [ -f "${TOOLCHAIN_BIN_DIR}/lld" ]; then
            LLD_BINARY="${TOOLCHAIN_BIN_DIR}/lld"
            echo "SUCCESS: 'lld' found directly in ${TOOLCHAIN_BIN_DIR}."
          elif [ -f "${TOOLCHAIN_BIN_DIR}/ld.lld" ]; then
            LLD_BINARY="${TOOLCHAIN_BIN_DIR}/ld.lld"
            echo "SUCCESS: 'ld.lld' found in ${TOOLCHAIN_BIN_DIR}. Will use this as the primary lld."
          elif command -v lld &> /dev/null; then
            LLD_BINARY="$(which lld)"
            echo "SUCCESS: 'lld' found via 'command -v lld' in PATH! Location: ${LLD_BINARY}"
          elif command -v ld.lld &> /dev/null; then
            LLD_BINARY="$(which ld.lld)"
            echo "SUCCESS: 'ld.lld' found via 'command -v ld.lld' in PATH! Location: ${LLD_BINARY}"
          else
            echo "ERROR: Neither 'lld' nor 'ld.lld' found in expected locations or PATH."
            echo "Please ensure your prebuilt toolchain includes 'lld' and its 'bin' directory is correctly set in PATH."
            exit 1
          fi

          if [ -z "${LLD_BINARY}" ]; then
              echo "FATAL ERROR: LLD_BINARY variable is empty. This should not happen if previous checks passed."
              exit 1
          fi

          echo "Creating symlinks for linker and compiler..."
          # Buat symlink untuk linker (ld)
          ln -sf "${LLD_BINARY}" "${TOOLCHAIN_BIN_DIR}/aarch64-linux-gnu-ld"
          ln -sf "${LLD_BINARY}" "${TOOLCHAIN_BIN_DIR}/arm-linux-gnueabi-ld"

          # --- BAGIAN BARU: Buat symlink untuk Clang cross-compiler ---
          # Periksa apakah binary 'clang' ada di direktori bin toolchain Anda
          if [ -f "${TOOLCHAIN_BIN_DIR}/clang" ]; then
            ln -sf "${TOOLCHAIN_BIN_DIR}/clang" "${TOOLCHAIN_BIN_DIR}/aarch64-linux-gnu-clang"
            ln -sf "${TOOLCHAIN_BIN_DIR}/clang" "${TOOLCHAIN_BIN_DIR}/arm-linux-gnueabi-clang"
            echo "SUCCESS: Symlinks created for aarch64-linux-gnu-clang and arm-linux-gnueabi-clang."
          else
            echo "ERROR: 'clang' binary not found in ${TOOLCHAIN_BIN_DIR}. Cannot create symlinks for cross-compilers."
            exit 1
          fi
          # --- AKHIR BAGIAN BARU ---

          echo "Verifying symlinks:"
          ls -l "${TOOLCHAIN_BIN_DIR}/aarch64-linux-gnu-ld"
          ls -l "${TOOLCHAIN_BIN_DIR}/arm-linux-gnueabi-ld"
          ls -l "${TOOLCHAIN_BIN_DIR}/aarch64-linux-gnu-clang" # Verifikasi symlink baru
          ls -l "${TOOLCHAIN_BIN_DIR}/arm-linux-gnueabi-clang" # Verifikasi symlink baru
          echo "---"

          echo "Verifying compilers:"
          # Ini mungkin masih menampilkan clang sistem, tapi cross-compiler di bawah ini yang penting
          clang --version 
          aarch64-linux-gnu-clang --version # <<< INI SEHARUSNYA BERHASIL SEKARANG!
          arm-linux-gnueabi-clang --version
          echo "---"
        

      - name: Build kernel with Clang
        run: |
          export ARCH=arm64
          export PATH="$GITHUB_WORKSPACE/clang-prebuilt/bin:$PATH"
          export CC=clang
          export LD=ld.lld
          export HOSTLD=ld.lld
          export CLANG_TRIPLE=aarch64-linux-gnu-
          export CROSS_COMPILE=aarch64-linux-gnu-
          export CROSS_COMPILE_ARM32=arm-linux-gnueabi-
          export CROSS_COMPILE_COMPAT=arm-linux-gnueabi-
          rm -rf out
          make O=out ARCH=arm64 surya_defconfig
          make -j$(nproc) O=out ARCH=arm64 CC=clang \
            CROSS_COMPILE=$CROSS_COMPILE \
            CROSS_COMPILE_COMPAT=$CROSS_COMPILE_COMPAT \
            V=1
            
      - name: Clone AnyKernel3
        run: |
          git clone https://github.com/ekqiplur/AnyKernel3.git anykernel
      - name: Package kernel with AnyKernel3
        run: |
          ZIP_NAME="KerNullException-$(date '+%Y%m%d-%H%M').zip"
          cp out/arch/arm64/boot/Image anykernel/
          mkdir -p anykernel/dtb
          cp out/arch/arm64/boot/dts/qcom/*.dtb anykernel/dtb/
          if [ -f out/arch/arm64/boot/dtbo.img ]; then
            cp out/arch/arm64/boot/dtbo.img anykernel/
          else
            echo "Warning: dtbo.img not found. Skipping copy."
          fi
          rm -rf anykernel/ramdisk 
          rm -rf anykernel/patch  
          rm -rf anykernel/modules 
          cd anykernel
          zip -r9 ../${ZIP_NAME} ./*
      - name: Upload flashable kernel zip
        uses: actions/upload-artifact@v4
        with:
          name: flashable-kernel
          path: ${ZIP_NAME}

      - name: Send flashable kernel to Telegram
        env:
          BOT_TOKEN: ${{ secrets.TG_BOT_TOKEN }}
          CHAT_ID: ${{ secrets.TG_CHAT_ID }}
        run: |
          DYNAMIC_ZIP_NAME="KerNullException-$(date '+%Y%m%d-%H%M').zip"
          curl -F document=@./${DYNAMIC_ZIP_NAME} \
               -F chat_id=$CHAT_ID \
               -F caption="âœ… Build selesai! Ini kernel flashable terbaru." \
               https://api.telegram.org/bot$BOT_TOKEN/sendDocument
